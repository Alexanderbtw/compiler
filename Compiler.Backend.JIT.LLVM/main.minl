fn fact(n) {
    if (n <= 1) return 1;
    return n * fact(n - 1);
}

fn fib(n) {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);
}

fn sum_while(n) {
    var i = 0;
    var acc = 0;
    while (i < n) {
        acc = acc + i;
        i = i + 1;
    }
    return acc;
}

fn sum_for(n) {
    var acc = 0;
    for (var i = 0; i < n; i = i + 1) {
        acc = acc + i;
    }
    return acc;
}

fn qsort(arr, lo, hi) {
    if (lo >= hi) return;

    var p = arr[(lo + hi) / 2];
    var i = lo;
    var j = hi;

    while (i <= j) {
        while (arr[i] < p)  i = i + 1;
        while (arr[j] > p)  j = j - 1;

        if (i <= j) {
            var t   = arr[i];
            arr[i]  = arr[j];
            arr[j]  = t;
            i = i + 1;
            j = j - 1;
        }
    }

    qsort(arr, lo, j);
    qsort(arr, i,  hi);
}

fn sieve(limit) {
    var flags = array(limit + 1, 1);
    flags[0] = 0;
    flags[1] = 0;

    var p = 2;
    while (p * p <= limit) {
        if (flags[p] == 1) {
            var j = p * p;
            while (j <= limit) { flags[j] = 0;  j = j + p; }
        }
        p = p + 1;
    }
    return flags;
}

fn main() {
    print("LLVM JIT smoke");

    // arithmetic
    var x = 7; var y = 3;
    assert(x + y == 10, "add");
    assert(x - y == 4,  "sub");
    assert(x * y == 21, "mul");
    assert(x / y == 2,  "div");
    assert(x % y == 1,  "mod");

    // if-else
    var t = 0;
    if (x > y) t = 1; else t = 2;
    assert(t == 1, "if-else");

    // loops
    assert(sum_while(10) == 45, "sum_while");
    assert(sum_for(5) == 10,    "sum_for");

    // recursion
    assert(fact(10) == 3628800, "fact");
    assert(fib(10)  == 55,      "fib");

    // arrays and len
    var a = array(5, 7);
    assert(len(a) == 5, "len(arr)");
    assert(a[2] == 7,   "arr init");
    a[2] = 42;  assert(a[2] == 42, "arr set");
    print("array", len(a), a[0], a[2], a[4]);

    // strings, ord/chr
    assert(len("abcd") == 4, "len(str)");
    var c = chr(ord('Z'));
    assert(c == 'Z', "chr/ord");
    print("str/chr", len("abcd"), c);

    // sieve(100)
    var flags = sieve(100);
    var cnt = 0; var i = 0;
    while (i <= 100) { if (flags[i] == 1) cnt = cnt + 1;  i = i + 1; }
    assert(cnt == 25, "sieve");
    print("primes100", cnt);

    // qsort small
    var N = 16; var arr = array(N);
    var k = 0; while (k < N) { arr[k] = (N - 1) - k;  k = k + 1; }
    qsort(arr, 0, N - 1);
    assert(arr[0] == 0 && arr[N - 1] == N - 1, "qsort");
    print("sorted", arr[0], arr[N - 1]);

    print("OK");
    return 0;
}
